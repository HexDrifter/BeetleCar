//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Configuration/Input/GameInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInput"",
    ""maps"": [
        {
            ""name"": ""Actor"",
            ""id"": ""be7623ce-49ea-4c79-b561-4a518feb3400"",
            ""actions"": [
                {
                    ""name"": ""Direction"",
                    ""type"": ""Value"",
                    ""id"": ""745fb27d-507d-479a-b507-e678773d3857"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Acceleration"",
                    ""type"": ""Value"",
                    ""id"": ""69e88ea1-88ab-44fb-b3ad-2c87dc1243e4"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Brake"",
                    ""type"": ""Value"",
                    ""id"": ""8eef8f83-6c2a-4c95-8d24-0cec3783a65a"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ShiftUp"",
                    ""type"": ""Button"",
                    ""id"": ""19bb3aa4-7cc2-4ff3-b09b-2f70097ce051"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ShiftDown"",
                    ""type"": ""Button"",
                    ""id"": ""eac87865-661f-4838-95ed-6aedddc5b295"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TestButton"",
                    ""type"": ""Button"",
                    ""id"": ""a070c7a2-6dcc-45a4-8941-572238c521b6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TestTrigger"",
                    ""type"": ""Value"",
                    ""id"": ""152682ff-2d42-43b1-819e-f5b238903cbe"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Keyboard WASD"",
                    ""id"": ""f34d6382-e138-4079-92de-186d200f817e"",
                    ""path"": ""2DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Direction"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""398c4a94-fffd-4a62-b0fa-f1cc60cae9b3"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Direction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""062a50c4-5f42-4758-82c2-a17fbb092501"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Direction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Keyboard Arrows"",
                    ""id"": ""c8d46d44-4f24-45eb-9ad5-8fc6cb01d9ba"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Direction"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""09bfab1c-f210-4747-b5d6-8f4f271026e3"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Direction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""cc18b7e5-972a-4f5a-9606-f0a1d34d61ef"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Direction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""25e995f6-a6fe-4daf-83fa-7f276b2e215d"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Direction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""50c2ed9a-72fa-4b50-b382-bac2be779e2e"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Brake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c8065321-7740-453e-a6bf-14b82451fa24"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Brake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""df85417f-4463-4355-9f48-8ea6e5f27696"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Acceleration"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""88ef6a78-3686-4c8a-b822-eac56a9903ba"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Acceleration"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ec084fa1-12ae-4235-b391-151bb40215f2"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShiftUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e1bcd5e3-432c-4d19-87de-7a12a2bfbbad"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShiftUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eb3da2f7-8cf9-4258-8ac1-b1a8d2f4509c"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShiftDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3e78f974-23a6-49a5-a8a9-24da285a8697"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShiftDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1487262e-388b-4708-8275-fcdba1dbaf17"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TestButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2ba53154-8c52-4969-a471-f4bd0c1f8cf4"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TestButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0ce56002-541a-41dc-a66b-f2679a5ba6cb"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TestTrigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Actor
        m_Actor = asset.FindActionMap("Actor", throwIfNotFound: true);
        m_Actor_Direction = m_Actor.FindAction("Direction", throwIfNotFound: true);
        m_Actor_Acceleration = m_Actor.FindAction("Acceleration", throwIfNotFound: true);
        m_Actor_Brake = m_Actor.FindAction("Brake", throwIfNotFound: true);
        m_Actor_ShiftUp = m_Actor.FindAction("ShiftUp", throwIfNotFound: true);
        m_Actor_ShiftDown = m_Actor.FindAction("ShiftDown", throwIfNotFound: true);
        m_Actor_TestButton = m_Actor.FindAction("TestButton", throwIfNotFound: true);
        m_Actor_TestTrigger = m_Actor.FindAction("TestTrigger", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Actor
    private readonly InputActionMap m_Actor;
    private List<IActorActions> m_ActorActionsCallbackInterfaces = new List<IActorActions>();
    private readonly InputAction m_Actor_Direction;
    private readonly InputAction m_Actor_Acceleration;
    private readonly InputAction m_Actor_Brake;
    private readonly InputAction m_Actor_ShiftUp;
    private readonly InputAction m_Actor_ShiftDown;
    private readonly InputAction m_Actor_TestButton;
    private readonly InputAction m_Actor_TestTrigger;
    public struct ActorActions
    {
        private @GameInput m_Wrapper;
        public ActorActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Direction => m_Wrapper.m_Actor_Direction;
        public InputAction @Acceleration => m_Wrapper.m_Actor_Acceleration;
        public InputAction @Brake => m_Wrapper.m_Actor_Brake;
        public InputAction @ShiftUp => m_Wrapper.m_Actor_ShiftUp;
        public InputAction @ShiftDown => m_Wrapper.m_Actor_ShiftDown;
        public InputAction @TestButton => m_Wrapper.m_Actor_TestButton;
        public InputAction @TestTrigger => m_Wrapper.m_Actor_TestTrigger;
        public InputActionMap Get() { return m_Wrapper.m_Actor; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ActorActions set) { return set.Get(); }
        public void AddCallbacks(IActorActions instance)
        {
            if (instance == null || m_Wrapper.m_ActorActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ActorActionsCallbackInterfaces.Add(instance);
            @Direction.started += instance.OnDirection;
            @Direction.performed += instance.OnDirection;
            @Direction.canceled += instance.OnDirection;
            @Acceleration.started += instance.OnAcceleration;
            @Acceleration.performed += instance.OnAcceleration;
            @Acceleration.canceled += instance.OnAcceleration;
            @Brake.started += instance.OnBrake;
            @Brake.performed += instance.OnBrake;
            @Brake.canceled += instance.OnBrake;
            @ShiftUp.started += instance.OnShiftUp;
            @ShiftUp.performed += instance.OnShiftUp;
            @ShiftUp.canceled += instance.OnShiftUp;
            @ShiftDown.started += instance.OnShiftDown;
            @ShiftDown.performed += instance.OnShiftDown;
            @ShiftDown.canceled += instance.OnShiftDown;
            @TestButton.started += instance.OnTestButton;
            @TestButton.performed += instance.OnTestButton;
            @TestButton.canceled += instance.OnTestButton;
            @TestTrigger.started += instance.OnTestTrigger;
            @TestTrigger.performed += instance.OnTestTrigger;
            @TestTrigger.canceled += instance.OnTestTrigger;
        }

        private void UnregisterCallbacks(IActorActions instance)
        {
            @Direction.started -= instance.OnDirection;
            @Direction.performed -= instance.OnDirection;
            @Direction.canceled -= instance.OnDirection;
            @Acceleration.started -= instance.OnAcceleration;
            @Acceleration.performed -= instance.OnAcceleration;
            @Acceleration.canceled -= instance.OnAcceleration;
            @Brake.started -= instance.OnBrake;
            @Brake.performed -= instance.OnBrake;
            @Brake.canceled -= instance.OnBrake;
            @ShiftUp.started -= instance.OnShiftUp;
            @ShiftUp.performed -= instance.OnShiftUp;
            @ShiftUp.canceled -= instance.OnShiftUp;
            @ShiftDown.started -= instance.OnShiftDown;
            @ShiftDown.performed -= instance.OnShiftDown;
            @ShiftDown.canceled -= instance.OnShiftDown;
            @TestButton.started -= instance.OnTestButton;
            @TestButton.performed -= instance.OnTestButton;
            @TestButton.canceled -= instance.OnTestButton;
            @TestTrigger.started -= instance.OnTestTrigger;
            @TestTrigger.performed -= instance.OnTestTrigger;
            @TestTrigger.canceled -= instance.OnTestTrigger;
        }

        public void RemoveCallbacks(IActorActions instance)
        {
            if (m_Wrapper.m_ActorActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IActorActions instance)
        {
            foreach (var item in m_Wrapper.m_ActorActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ActorActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ActorActions @Actor => new ActorActions(this);
    public interface IActorActions
    {
        void OnDirection(InputAction.CallbackContext context);
        void OnAcceleration(InputAction.CallbackContext context);
        void OnBrake(InputAction.CallbackContext context);
        void OnShiftUp(InputAction.CallbackContext context);
        void OnShiftDown(InputAction.CallbackContext context);
        void OnTestButton(InputAction.CallbackContext context);
        void OnTestTrigger(InputAction.CallbackContext context);
    }
}
